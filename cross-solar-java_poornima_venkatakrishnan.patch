From d3608796bcbb3f419bf8dcb163a83db9a8100953 Mon Sep 17 00:00:00 2001
From: venkatakrishnan-tu <venkatakrishnan.tu@gmail.com>
Date: Mon, 23 Jul 2018 00:33:20 -0400
Subject: [PATCH] My submission
XOV: XO_0_0_1

---
 build.gradle                                  |  14 ++
 gradlew                                       |   0
 settings.gradle                               |   2 +-
 .../techtrial/controller/PanelController.java |  85 ++++++------
 .../data/DailyElectricityDataCollector.java   |  85 ++++++++++++
 .../techtrial/dto/DailyElectricity.java       |  72 ----------
 .../techtrial/dto/DailyElectricityDTO.java    |  97 ++++++++++++++
 .../exceptions/GlobalExceptionHandler.java    |   0
 .../exceptions/ResourceNotFoundException.java |   8 ++
 .../techtrial/model/DailyElectricity.java     | 124 +++++++++++++++++
 .../techtrial/model/HourlyElectricity.java    |   1 +
 .../com/crossover/techtrial/model/Panel.java  |   7 +
 .../DailyElectricityRepository.java           |  15 +++
 .../HourlyElectricityRepository.java          |  11 +-
 .../techtrial/repository/PanelRepository.java |   7 +-
 .../service/DailyElectricityService.java      |  17 +++
 .../service/DailyElectricityServiceImpl.java  |  55 ++++++++
 .../service/HourlyElectricityService.java     |  15 ++-
 .../service/HourlyElectricityServiceImpl.java |  36 ++++-
 .../techtrial/service/PanelService.java       |  31 +++--
 .../techtrial/service/PanelServiceImpl.java   |  33 ++++-
 src/main/resources/application.properties     |   2 +-
 .../db/changelog/db.changelog-1.0.xml         |   0
 .../db/changelog/db.changelog-2.0.xml         |  48 +++++++
 .../db/changelog/db.changelog-master.xml      |   1 +
 .../DailyElectricityDataCollectorTest.java    |  52 ++++++++
 .../controller/PanelControllerTest.java       | 125 +++++++++++++-----
 .../service/DailyElectricityServiceTest.java  |  73 ++++++++++
 .../techtrial/service/PanelServiceTest.java   |  64 +++++++++
 .../crossover/techtrial/utils/TestUtils.java  |  51 +++++++
 30 files changed, 956 insertions(+), 175 deletions(-)
 mode change 100755 => 100644 gradlew
 create mode 100644 src/main/java/com/crossover/techtrial/data/DailyElectricityDataCollector.java
 delete mode 100644 src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
 create mode 100644 src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java
 mode change 100755 => 100644 src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
 create mode 100644 src/main/java/com/crossover/techtrial/exceptions/ResourceNotFoundException.java
 create mode 100644 src/main/java/com/crossover/techtrial/model/DailyElectricity.java
 create mode 100644 src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
 create mode 100644 src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
 create mode 100644 src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-1.0.xml
 create mode 100644 src/main/resources/db/changelog/db.changelog-2.0.xml
 mode change 100755 => 100644 src/main/resources/db/changelog/db.changelog-master.xml
 create mode 100644 src/test/java/com/crossover/techtrial/DailyElectricityDataCollectorTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/service/PanelServiceTest.java
 create mode 100644 src/test/java/com/crossover/techtrial/utils/TestUtils.java

diff --git a/build.gradle b/build.gradle
index f6cec90..0dd5f7d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -30,12 +30,26 @@ repositories {
 	mavenCentral()
 }
 
+jacocoTestReport {
+	afterEvaluate {
+		classDirectories = files(classDirectories.files.collect {
+			fileTree(dir: it,
+					exclude: [ 
+							  'com/crossover/techtrial/dto/**',
+							  'com/crossover/techtrial/model/**',
+							  'com/crossover/techtrial/CrossSolarApplication**'])
+		})
+	}
+}
 
 dependencies {
 	compile('org.springframework.boot:spring-boot-starter')
 	compile('org.springframework.boot:spring-boot-starter-data-jpa')
 	compile('org.springframework.boot:spring-boot-starter-web')
 	compile('org.springframework.boot:spring-boot-starter-data-rest')
+	compile('net.javacrumbs.shedlock:shedlock-provider-jdbc-template:1.0.0')
+	compile('net.javacrumbs.shedlock:shedlock-spring:1.0.0')
+	//compile('org.springframework.data:spring-data-commons-core::1.1.0.RELEASE')
 	compile('com.fasterxml.jackson.core:jackson-core')
 	testCompile('com.h2database:h2')
 	testCompile('org.springframework.boot:spring-boot-starter-aop')
diff --git a/gradlew b/gradlew
old mode 100755
new mode 100644
diff --git a/settings.gradle b/settings.gradle
index 9c6924b..0f557a1 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-rootProject.name = 'cross-solar-java'
+rootProject.name = 'cross-solar-java-poornima'
diff --git a/src/main/java/com/crossover/techtrial/controller/PanelController.java b/src/main/java/com/crossover/techtrial/controller/PanelController.java
index d308f18..5cd1e87 100644
--- a/src/main/java/com/crossover/techtrial/controller/PanelController.java
+++ b/src/main/java/com/crossover/techtrial/controller/PanelController.java
@@ -1,95 +1,92 @@
 package com.crossover.techtrial.controller;
 
-import com.crossover.techtrial.dto.DailyElectricity;
+import com.crossover.techtrial.dto.DailyElectricityDTO;
 import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.DailyElectricityService;
 import com.crossover.techtrial.service.HourlyElectricityService;
 import com.crossover.techtrial.service.PanelService;
 import java.util.ArrayList;
 import java.util.List;
-import org.springframework.beans.factory.annotation.Autowired;
+
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.web.PageableDefault;
 import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.bind.annotation.*;
+import org.springframework.web.util.UriComponentsBuilder;
 
 /**
  * Panel Controller for all Rest APIs related to Panel.
- * @author Crossover
  *
+ * @author Crossover
  */
-
 @RestController
 public class PanelController {
 
-  @Autowired
-  PanelService panelService;
-  
-  @Autowired
-  HourlyElectricityService hourlyElectricityService;
-  
+  private final PanelService panelService;
+
+  private final HourlyElectricityService hourlyElectricityService;
+
+  private final DailyElectricityService dailyElectricityService;
+
+  public PanelController(final PanelService panelService,
+                         final HourlyElectricityService hourlyElectricityService,
+                         final DailyElectricityService dailyElectricityService) {
+    this.panelService = panelService;
+    this.hourlyElectricityService = hourlyElectricityService;
+    this.dailyElectricityService = dailyElectricityService;
+  }
+
   /**
    * Register a Panel to System and start receiving the electricity statistics.
    * @param panel to register.
    * @return
    */
   @PostMapping(path = "/api/register")
-  public ResponseEntity<?> registerPanel(@RequestBody Panel panel) {
-    panelService.register(panel);
-    return  ResponseEntity.accepted().build();
+  public ResponseEntity<Panel> registerPanel(@RequestBody Panel panel) {
+    Panel saved = panelService.register(panel);
+    return ResponseEntity.ok(saved);
   }
-  
+
   /**
-   * Controller Method to save hourly Electricity to Database. 
+   * Controller Method to save hourly Electricity to Database.
    * @param panelSerial Serial number of Panel.
    * @param hourlyElectricity  generated electricity for this panel.
    * @return
    */
-  
+
   @PostMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> saveHourlyElectricity(
-      @PathVariable(value = "panel-serial") String panelSerial, 
+  public ResponseEntity<HourlyElectricity> saveHourlyElectricity(
+      @PathVariable(value = "panel-serial") String panelSerial,
       @RequestBody HourlyElectricity hourlyElectricity) {
-    return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity));
+    return ResponseEntity.ok(hourlyElectricityService.save(hourlyElectricity, panelSerial));
   }
-   
+
   /**
    * Get Hourly Electricity from Previous dates.
    */
-  
+
   @GetMapping(path = "/api/panels/{panel-serial}/hourly")
-  public ResponseEntity<?> hourlyElectricity(
-      @PathVariable(value = "banel-serial") String panelSerial,
-      @PageableDefault(size = 5,value = 0) Pageable pageable) {
-    Panel panel = panelService.findBySerial(panelSerial);
-    if (panel == null) {
-      return ResponseEntity.notFound().build(); 
-    }
-    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(
-        panel.getId(), pageable);
+  public ResponseEntity<Page<HourlyElectricity>> hourlyElectricity(
+      @PathVariable(value = "panel-serial") String panelSerial,
+      @PageableDefault(size = 5, value = 0) Pageable pageable) {
+    Page<HourlyElectricity> page = hourlyElectricityService.getAllHourlyElectricityByPanelId(panelSerial, pageable);
     return ResponseEntity.ok(page);
   }
-  
+
   /**
-   * This end point is used by Front end charts component to plot the daily statistics of 
+   * This end point is used by Front end charts component to plot the daily statistics of
    * electricity generated by this Panel from the day it registered to end of previous day.
    * @param panelSerial is unique serial for this Panel.
    * @return
    */
-  
+
   @GetMapping(path = "/api/panels/{panel-serial}/daily")
-  public ResponseEntity<List<DailyElectricity>> allDailyElectricityFromYesterday(
+  public ResponseEntity<List<DailyElectricityDTO>> allDailyElectricityFromYesterday(
       @PathVariable(value = "panel-serial") String panelSerial) {
-    List<DailyElectricity> dailyElectricityForPanel = new ArrayList<>();
-    /**
-     * IMPLEMENT THE LOGIC HERE and FEEL FREE TO MODIFY OR ADD CODE TO RELATED CLASSES.
-     * MAKE SURE NOT TO CHANGE THE SIGNATURE OF ANY END POINT. NO PAGINATION IS NEEDED HERE.
-     */
+    List<DailyElectricityDTO> dailyElectricityForPanel = this.dailyElectricityService.getAllDailyElectricityByPanelId(panelSerial);
     return ResponseEntity.ok(dailyElectricityForPanel);
   }
+
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/data/DailyElectricityDataCollector.java b/src/main/java/com/crossover/techtrial/data/DailyElectricityDataCollector.java
new file mode 100644
index 0000000..1a4104c
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/data/DailyElectricityDataCollector.java
@@ -0,0 +1,85 @@
+package com.crossover.techtrial.data;
+
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.DailyElectricityService;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.PanelService;
+import net.javacrumbs.shedlock.core.SchedulerLock;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.scheduling.annotation.Scheduled;
+import org.springframework.stereotype.Component;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
+import java.time.ZoneId;
+import java.util.List;
+import java.util.LongSummaryStatistics;
+
+/**
+ * Job to consolidate on daily bases all the electricity generated.s
+ *
+ */
+@Component
+@ConditionalOnProperty(value = "crosssolar.scheduler.enabled", havingValue = "true", matchIfMissing = true)
+public class DailyElectricityDataCollector {
+
+    // TODO: externalize this configuration
+    static final String ZONE_ID = "CST6CDT";
+    private static final String CRON = "0 0 0 * * *";
+
+    private final HourlyElectricityService hourlyElectricityService;
+    private final DailyElectricityService dailyElectricityService;
+    private final PanelService panelService;
+
+    public DailyElectricityDataCollector(final HourlyElectricityService hourlyElectricityService,
+                                         final DailyElectricityService dailyElectricityService,
+                                         final PanelService panelService) {
+        this.hourlyElectricityService = hourlyElectricityService;
+        this.dailyElectricityService = dailyElectricityService;
+        this.panelService = panelService;
+    }
+
+    @Scheduled(cron = CRON, zone = ZONE_ID)
+    @SchedulerLock(name = "consolidateDailyElectricityGeneration")
+    public void consolidateDailyElectricityGeneration() {
+        process();
+    }
+
+    private void process() {
+        List<Panel> panels = this.panelService.getAll();
+
+        for (Panel panel : panels) {
+            List<HourlyElectricity> hourlyElectricities = this.hourlyElectricityService
+                    .getAllHourlyElectricityByReadingAtBetween(yesterdayAtStartOfDay(), yesterdayAtEndOfDay(), panel);
+
+            if (hourlyElectricities.isEmpty()) {
+                continue;
+            }
+
+            LongSummaryStatistics summaryStatistics = hourlyElectricities.stream()
+                    .mapToLong(HourlyElectricity::getGeneratedElectricity)
+                    .summaryStatistics();
+
+            DailyElectricity dailyElectricity = new DailyElectricity(panel,
+                    summaryStatistics.getSum(),
+                    summaryStatistics.getMin(),
+                    summaryStatistics.getMax(),
+                    summaryStatistics.getAverage(),
+                    yesterdayAtStartOfDay());
+            this.dailyElectricityService.save(dailyElectricity);
+        }
+    }
+
+    private LocalDateTime yesterdayAtStartOfDay() {
+        return LocalDate.now(ZoneId.of(ZONE_ID)).minusDays(1).atStartOfDay();
+    }
+
+    private LocalDateTime yesterdayAtEndOfDay() {
+        LocalDate yesterday = LocalDate.now(ZoneId.of(ZONE_ID)).minusDays(1);
+        return LocalDateTime.of(yesterday, LocalTime.MAX);
+    }
+
+}
diff --git a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java b/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
deleted file mode 100644
index b0e0ea9..0000000
--- a/src/main/java/com/crossover/techtrial/dto/DailyElectricity.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package com.crossover.techtrial.dto;
-
-import java.io.Serializable;
-import java.time.LocalDate;
-
-/**
- * DailyElectricity class will hold sum, average,minimum and maximum electricity for a given day.
- * @author Crossover
- *
- */
-
-public class DailyElectricity implements Serializable {
-  
-  private static final long serialVersionUID = 3605549122072628877L;
-
-  private LocalDate date;
-  
-  private Long sum;
-  
-  private Double average;
-  
-  private Long min;
-  
-  private Long max;
-
-  public LocalDate getDate() {
-    return date;
-  }
-
-  public void setDate(LocalDate date) {
-    this.date = date;
-  }
-
-  public Long getSum() {
-    return sum;
-  }
-
-  public void setSum(Long sum) {
-    this.sum = sum;
-  }
-
-  public Double getAverage() {
-    return average;
-  }
-
-  public void setAverage(Double average) {
-    this.average = average;
-  }
-
-  public Long getMin() {
-    return min;
-  }
-
-  public void setMin(Long min) {
-    this.min = min;
-  }
-
-  public Long getMax() {
-    return max;
-  }
-
-  public void setMax(Long max) {
-    this.max = max;
-  }
-
-  @Override
-  public String toString() {
-    return "DailyElectricity [date=" + date + ", sum=" + sum + ", average="
-        + average + ", min=" + min + ", max=" + max + "]";
-  }
-
-}
diff --git a/src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java b/src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java
new file mode 100644
index 0000000..eb90c52
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/dto/DailyElectricityDTO.java
@@ -0,0 +1,97 @@
+package com.crossover.techtrial.dto;
+
+import java.io.Serializable;
+import java.time.LocalDate;
+
+/**
+ * DailyElectricityDTO class will hold sum, average,minimum and maximum electricity for a given day.
+ * @author Crossover
+ *
+ */
+
+public class DailyElectricityDTO implements Serializable {
+
+	private static final long serialVersionUID = 3605549122072628877L;
+
+	private Long panelId;
+
+	private LocalDate date;
+
+	private Long sum;
+
+	private Double average;
+
+	private Long min;
+
+	private Long max;
+
+
+	public DailyElectricityDTO(LocalDate date, Long sum, Double average, Long min, Long max) {
+		this.date = date;
+		this.sum = sum;
+		this.average = average;
+		this.min = min;
+		this.max = max;
+	}
+
+	public DailyElectricityDTO(Long panelId, LocalDate date, Long sum, Double average, Long min, Long max) {
+		this(date, sum, average, min, max);
+		this.panelId = panelId;
+	}
+
+	public Long getPanelId() {
+		return panelId;
+	}
+
+	public void setPanelId(Long panelId) {
+		this.panelId = panelId;
+	}
+
+
+	public LocalDate getDate() {
+		return date;
+	}
+
+	public void setDate(LocalDate date) {
+		this.date = date;
+	}
+
+	public Long getSum() {
+		return sum;
+	}
+
+	public void setSum(Long sum) {
+		this.sum = sum;
+	}
+
+	public Double getAverage() {
+		return average;
+	}
+
+	public void setAverage(Double average) {
+		this.average = average;
+	}
+
+	public Long getMin() {
+		return min;
+	}
+
+	public void setMin(Long min) {
+		this.min = min;
+	}
+
+	public Long getMax() {
+		return max;
+	}
+
+	public void setMax(Long max) {
+		this.max = max;
+	}
+
+	@Override
+	public String toString() {
+		return "DailyElectricityDTO [date=" + date + ", sum=" + sum + ", average="
+				+ average + ", min=" + min + ", max=" + max + "]";
+	}
+
+}
diff --git a/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java b/src/main/java/com/crossover/techtrial/exceptions/GlobalExceptionHandler.java
old mode 100755
new mode 100644
diff --git a/src/main/java/com/crossover/techtrial/exceptions/ResourceNotFoundException.java b/src/main/java/com/crossover/techtrial/exceptions/ResourceNotFoundException.java
new file mode 100644
index 0000000..0e570ef
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/exceptions/ResourceNotFoundException.java
@@ -0,0 +1,8 @@
+package com.crossover.techtrial.exceptions;
+
+public class ResourceNotFoundException extends RuntimeException {
+
+    public ResourceNotFoundException(String message) {
+        super(message);
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/model/DailyElectricity.java b/src/main/java/com/crossover/techtrial/model/DailyElectricity.java
new file mode 100644
index 0000000..60643d9
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/model/DailyElectricity.java
@@ -0,0 +1,124 @@
+package com.crossover.techtrial.model;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
+import javax.persistence.*;
+import java.io.Serializable;
+import java.time.LocalDateTime;
+
+/**
+ * DailyElectricity is responsible for electricity generated by a Panel in a day.
+ *
+ */
+@Entity
+@Table(name = "daily_electricity")
+public class DailyElectricity implements Serializable {
+    private static final long serialVersionUID = -2291797968183794145L;
+
+    @JsonIgnore
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    @JsonIgnore
+    @ManyToOne
+    @JoinColumn(name = "panel_id", referencedColumnName = "id")
+    private Panel panel;
+
+    @Column(name = "generated_electricity_sum")
+    private Long generatedElectricitySum;
+
+    @Column(name = "generated_electricity_min")
+    private Long generatedElectricityMin;
+
+    @Column(name = "generated_electricity_max")
+    private Long generatedElectricityMax;
+
+    @Column(name = "generated_electricity_average")
+    private Double generatedElectricityAverage;
+
+    @Column(name = "reading_at")
+    private LocalDateTime readingAt;
+
+    public DailyElectricity() {
+    }
+
+    public DailyElectricity(Panel panel, Long generatedElectricitySum, Long generatedElectricityMin,
+                            Long generatedElectricityMax, Double generatedElectricityAverage, LocalDateTime readingAt) {
+        this.panel = panel;
+        this.generatedElectricitySum = generatedElectricitySum;
+        this.generatedElectricityMin = generatedElectricityMin;
+        this.generatedElectricityMax = generatedElectricityMax;
+        this.generatedElectricityAverage = generatedElectricityAverage;
+        this.readingAt = readingAt;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public Panel getPanel() {
+        return panel;
+    }
+
+    public void setPanel(Panel panel) {
+        this.panel = panel;
+    }
+
+    public Long getGeneratedElectricitySum() {
+        return generatedElectricitySum;
+    }
+
+    public void setGeneratedElectricitySum(Long generatedElectricitySum) {
+        this.generatedElectricitySum = generatedElectricitySum;
+    }
+
+    public Long getGeneratedElectricityMin() {
+        return generatedElectricityMin;
+    }
+
+    public void setGeneratedElectricityMin(Long generatedElectricityMin) {
+        this.generatedElectricityMin = generatedElectricityMin;
+    }
+
+    public Long getGeneratedElectricityMax() {
+        return generatedElectricityMax;
+    }
+
+    public void setGeneratedElectricityMax(Long generatedElectricityMax) {
+        this.generatedElectricityMax = generatedElectricityMax;
+    }
+
+    public Double getGeneratedElectricityAverage() {
+        return generatedElectricityAverage;
+    }
+
+    public void setGeneratedElectricityAverage(Double generatedElectricityAverage) {
+        this.generatedElectricityAverage = generatedElectricityAverage;
+    }
+
+    public LocalDateTime getReadingAt() {
+        return readingAt;
+    }
+
+    public void setReadingAt(LocalDateTime readingAt) {
+        this.readingAt = readingAt;
+    }
+
+    @Override
+    public String toString() {
+        return "DailyElectricityDTO{" +
+                "id=" + id +
+                ", panel=" + panel +
+                ", generatedElectricitySum=" + generatedElectricitySum +
+                ", generatedElectricityMin=" + generatedElectricityMin +
+                ", generatedElectricityMax=" + generatedElectricityMax +
+                ", generatedElectricityAverage=" + generatedElectricityAverage +
+                ", readingAt=" + readingAt +
+                '}';
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
index 275f765..5a33a6d 100644
--- a/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
+++ b/src/main/java/com/crossover/techtrial/model/HourlyElectricity.java
@@ -26,6 +26,7 @@ public class HourlyElectricity implements Serializable {
 
   private static final long serialVersionUID = -575347909928592140L;
   
+  @JsonIgnore
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   Long id;
diff --git a/src/main/java/com/crossover/techtrial/model/Panel.java b/src/main/java/com/crossover/techtrial/model/Panel.java
index 34fb762..43299d8 100644
--- a/src/main/java/com/crossover/techtrial/model/Panel.java
+++ b/src/main/java/com/crossover/techtrial/model/Panel.java
@@ -43,7 +43,14 @@ public class Panel implements Serializable {
   public Long getId() {
     return id;
   }
+  public Panel() {
+  }
+
+  public Panel(Long id) {
+	    this.id = id;
+  }
 
+  
   public void setId(Long id) {
     this.id = id;
   }
diff --git a/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
new file mode 100644
index 0000000..1b3ebf5
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/repository/DailyElectricityRepository.java
@@ -0,0 +1,15 @@
+package com.crossover.techtrial.repository;
+
+import com.crossover.techtrial.model.DailyElectricity;
+import org.springframework.data.repository.CrudRepository;
+
+import java.util.List;
+
+/**
+ * Repository for all operations related to {@link DailyElectricity}.
+ *
+ */
+public interface DailyElectricityRepository extends CrudRepository<DailyElectricity, Long> {
+
+    List<DailyElectricity> findAllByPanelId(Long panelId);
+}
diff --git a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
index b883493..e7dce9a 100644
--- a/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/HourlyElectricityRepository.java
@@ -1,6 +1,11 @@
 package com.crossover.techtrial.repository;
 
 import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.repository.PagingAndSortingRepository;
@@ -13,5 +18,9 @@ import org.springframework.data.rest.core.annotation.RestResource;
 @RestResource(exported = false)
 public interface HourlyElectricityRepository 
     extends PagingAndSortingRepository<HourlyElectricity,Long> {
-  Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId,Pageable pageable);
+  //Page<HourlyElectricity> findAllByPanelIdOrderByReadingAtDesc(Long panelId,Pageable pageable);
+  Page<HourlyElectricity> findAllByPanelId(Long panelId, Pageable pageable);
+
+  List<HourlyElectricity> findByReadingAtBetweenAndPanel(LocalDateTime initialReadingAt, LocalDateTime finalReadingAt, Panel panel);
+
 }
diff --git a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
index dcba8f3..1128db2 100644
--- a/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
+++ b/src/main/java/com/crossover/techtrial/repository/PanelRepository.java
@@ -1,8 +1,9 @@
 package com.crossover.techtrial.repository;
 
-import com.crossover.techtrial.model.Panel;
-import org.springframework.data.repository.PagingAndSortingRepository;
+import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.rest.core.annotation.RestResource;
+
+import com.crossover.techtrial.model.Panel;
 /**
  * PanelRepository allows all operations to Panel Entity.
  * @author Crossover
@@ -10,6 +11,6 @@ import org.springframework.data.rest.core.annotation.RestResource;
  */
 
 @RestResource(exported = false)
-public interface PanelRepository extends PagingAndSortingRepository<Panel, Long> {
+public interface PanelRepository extends JpaRepository<Panel, Long> {
   Panel findBySerial(String serial);
 }
diff --git a/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java b/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
new file mode 100644
index 0000000..2858c7c
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/service/DailyElectricityService.java
@@ -0,0 +1,17 @@
+package com.crossover.techtrial.service;
+
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.DailyElectricity;
+
+import java.util.List;
+
+/**
+ * Services for {@link DailyElectricity}.
+ *
+ */
+public interface DailyElectricityService {
+
+    DailyElectricity save(DailyElectricity dailyElectricity);
+
+    List<DailyElectricityDTO> getAllDailyElectricityByPanelId(String panelSerial);
+}
diff --git a/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
new file mode 100644
index 0000000..9426af0
--- /dev/null
+++ b/src/main/java/com/crossover/techtrial/service/DailyElectricityServiceImpl.java
@@ -0,0 +1,55 @@
+package com.crossover.techtrial.service;
+
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.DailyElectricityRepository;
+import com.crossover.techtrial.exceptions.ResourceNotFoundException;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+import static java.lang.String.format;
+import static java.util.stream.Collectors.toList;
+
+/**
+ * Implementation of {@link DailyElectricityService}.
+ *
+ */
+@Service
+public class DailyElectricityServiceImpl implements DailyElectricityService {
+
+    private final DailyElectricityRepository dailyElectricityRepository;
+    private final PanelService panelService;
+
+    public DailyElectricityServiceImpl(final DailyElectricityRepository dailyElectricityRepository,
+                                       final PanelService panelService) {
+        this.dailyElectricityRepository = dailyElectricityRepository;
+        this.panelService = panelService;
+    }
+
+    @Override
+    public DailyElectricity save(DailyElectricity dailyElectricity) {
+        return this.dailyElectricityRepository.save(dailyElectricity);
+    }
+
+    @Override
+    public List<DailyElectricityDTO> getAllDailyElectricityByPanelId(String panelSerial) {
+        Panel panel = this.panelService.getBySerial(panelSerial);
+        List<DailyElectricity> entities = this.dailyElectricityRepository.findAllByPanelId(panel.getId());
+
+        if (entities.isEmpty()) {
+            throw new ResourceNotFoundException(format("No daily electricity report found for the panel '%s'", panelSerial));
+        }
+
+        return entities.stream()
+                .map(entity -> new DailyElectricityDTO(
+                                entity.getPanel().getId(),
+                                entity.getReadingAt().toLocalDate(),
+                                entity.getGeneratedElectricitySum(),
+                                entity.getGeneratedElectricityAverage(),
+                                entity.getGeneratedElectricityMin(),
+                                entity.getGeneratedElectricityMax()))
+                .collect(toList());
+    }
+}
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
index 70c40b7..6c114a9 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityService.java
@@ -1,6 +1,11 @@
 package com.crossover.techtrial.service;
 
 import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 
@@ -10,7 +15,11 @@ import org.springframework.data.domain.Pageable;
  *
  */
 public interface HourlyElectricityService {
-  HourlyElectricity save(HourlyElectricity hourlyElectricity);
-  
-  Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable);
+   
+  HourlyElectricity save(HourlyElectricity hourlyElectricity, String panelSerial);
+
+  Page<HourlyElectricity> getAllHourlyElectricityByPanelId(String panelSerial, Pageable pageable);
+
+  List<HourlyElectricity> getAllHourlyElectricityByReadingAtBetween(LocalDateTime initialReadingAt, LocalDateTime finalReadingAt, Panel panel);
+
 }
diff --git a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
index 6634e49..b9f041f 100644
--- a/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/HourlyElectricityServiceImpl.java
@@ -1,8 +1,12 @@
 package com.crossover.techtrial.service;
 
 import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.repository.HourlyElectricityRepository;
 
+import java.time.LocalDateTime;
+import java.util.List;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
@@ -17,15 +21,35 @@ import org.springframework.stereotype.Service;
 
 @Service
 public class HourlyElectricityServiceImpl implements HourlyElectricityService {
+	
   @Autowired
   HourlyElectricityRepository hourlyElectricityRepository;
-  
-  public HourlyElectricity save(HourlyElectricity hourlyElectricity) {
+ 
+  @Autowired
+  PanelService panelService;
+
+  public HourlyElectricityServiceImpl(final HourlyElectricityRepository hourlyElectricityRepository,
+                                      final PanelService panelService) {
+    this.hourlyElectricityRepository = hourlyElectricityRepository;
+    this.panelService = panelService;
+  }
+
+  @Override
+  public HourlyElectricity save(HourlyElectricity hourlyElectricity, String panelSerial) {
+    Panel panel = panelService.getBySerial(panelSerial);
+    hourlyElectricity.setPanel(panel);
+
     return hourlyElectricityRepository.save(hourlyElectricity);
   }
-  
-  public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(Long panelId, Pageable pageable) {
-    return hourlyElectricityRepository.findAllByPanelIdOrderByReadingAtDesc(panelId, pageable);
+
+  @Override
+  public Page<HourlyElectricity> getAllHourlyElectricityByPanelId(String panelSerial, Pageable pageable) {
+    Panel panel = panelService.getBySerial(panelSerial);
+    return hourlyElectricityRepository.findAllByPanelId(panel.getId(), pageable);
+  }
+
+  @Override
+  public List<HourlyElectricity> getAllHourlyElectricityByReadingAtBetween(LocalDateTime initialReadingAt, LocalDateTime finalReadingAt, Panel panel) {
+    return this.hourlyElectricityRepository.findByReadingAtBetweenAndPanel(initialReadingAt, finalReadingAt, panel);
   }
-  
 }
\ No newline at end of file
diff --git a/src/main/java/com/crossover/techtrial/service/PanelService.java b/src/main/java/com/crossover/techtrial/service/PanelService.java
index b1ba940..d96de21 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelService.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelService.java
@@ -1,5 +1,7 @@
 package com.crossover.techtrial.service;
 
+import java.util.List;
+
 import com.crossover.techtrial.model.Panel;
 
 /**
@@ -9,12 +11,25 @@ import com.crossover.techtrial.model.Panel;
  */
 public interface PanelService {
   
-  /**
-   * Register a panel for electricity monitoring.
-   * @param panel to register with system.
-   */
-  
-  void register(Panel panel);
-  
-  Panel findBySerial(String serial);
+	  /**
+	   * Register a panel for electricity monitoring.
+	   * @param panel to register with system.
+	   */
+	  Panel register(Panel panel);
+
+	  /**
+	   * Find a {@link Panel} by its serial.
+	   *
+	   * @param serial The serial
+	   * @return The {@link Panel}
+	   */
+	  Panel getBySerial(String serial);
+
+	  /**
+	   * Returns all panels.
+	   *
+	   * @return List of {@link Panel}
+	   */
+	 
+	  List<Panel> getAll();
 }
diff --git a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
index 48649de..83917a3 100644
--- a/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
+++ b/src/main/java/com/crossover/techtrial/service/PanelServiceImpl.java
@@ -2,6 +2,12 @@ package com.crossover.techtrial.service;
 
 import com.crossover.techtrial.model.Panel;
 import com.crossover.techtrial.repository.PanelRepository;
+import com.crossover.techtrial.exceptions.ResourceNotFoundException;
+
+import static java.lang.String.format;
+
+import java.util.List;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
@@ -16,17 +22,32 @@ public class PanelServiceImpl implements PanelService {
 
   @Autowired
   PanelRepository panelRepository;
-  
+   
+  public PanelServiceImpl(final PanelRepository panelRepository) {
+    this.panelRepository = panelRepository;
+  }
+
   /* (non-Javadoc)
    * @see com.crossover.techtrial.service.PanelService#register(com.crossover.techtrial.model.Panel)
    */
   
   @Override
-  public void register(Panel panel) { 
-    panelRepository.save(panel);
+  public Panel register(Panel panel) {
+    return panelRepository.save(panel);
   }
-  
-  public Panel findBySerial(String serial) {
-    return panelRepository.findBySerial(serial);
+
+  @Override
+  public Panel getBySerial(String serial) {
+    Panel panel = panelRepository.findBySerial(serial);
+    if (panel == null) {
+      throw new ResourceNotFoundException(format("Panel '%s' was not found", serial));
+    }
+
+    return panel;
+  }
+
+  @Override
+  public List<Panel> getAll() {
+    return this.panelRepository.findAll();
   }
 }
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index c7cc890..29d22a7 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -2,7 +2,7 @@
 #Database connection Parameters
 spring.datasource.url: jdbc:mysql://localhost:3306/crosssolar?createDatabaseIfNotExist=true&useSSL=false
 spring.datasource.username=root
-spring.datasource.password=
+spring.datasource.password=Mysql123!
 spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 
 spring.jpa.hibernate.ddl-auto=none
diff --git a/src/main/resources/db/changelog/db.changelog-1.0.xml b/src/main/resources/db/changelog/db.changelog-1.0.xml
old mode 100755
new mode 100644
diff --git a/src/main/resources/db/changelog/db.changelog-2.0.xml b/src/main/resources/db/changelog/db.changelog-2.0.xml
new file mode 100644
index 0000000..ca47e4d
--- /dev/null
+++ b/src/main/resources/db/changelog/db.changelog-2.0.xml
@@ -0,0 +1,48 @@
+<?xml version="1.1" encoding="UTF-8" standalone="no"?>
+<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">
+    <changeSet author="poornima" id="1001122005_create_table_daily_electricity">
+        <createTable tableName="daily_electricity">
+            <column autoIncrement="true" name="id" type="BIGINT">
+                <constraints primaryKey="true" primaryKeyName="pk_daily_electricity"/>
+            </column>
+            <column name="panel_id" type="BIGINT">
+                <constraints nullable="false"
+                             foreignKeyName="fk_daily_panel_id"
+                             references="panel(id)"
+                />
+            </column>
+            <column name="generated_electricity_sum" type="BIGINT"/>
+            <column name="generated_electricity_min" type="BIGINT"/>
+            <column name="generated_electricity_max" type="BIGINT"/>
+            <column name="generated_electricity_average" type="DOUBLE"/>
+            <column name="reading_at" type="datetime"/>
+        </createTable>
+    </changeSet>
+
+    <changeSet author="poornima" id="1001122005_add_hourly_electricity_foreign_key_constraint">
+        <addForeignKeyConstraint baseColumnNames="panel_id"
+                                 baseTableName="hourly_electricity"
+                                 constraintName="fk_hourly_panel_id"
+                                 referencedColumnNames="id"
+                                 referencedTableName="panel"/>
+    </changeSet>
+
+    <changeSet dbms="mysql" author="poornima" id="1001122006_alter_table_panel_chance_longitude_latitude">
+        <modifyDataType columnName="longitude"
+                        newDataType="DOUBLE(8,4)"
+                        tableName="panel" />
+
+        <modifyDataType columnName="latitude"
+                        newDataType="DOUBLE(8,4)"
+                        tableName="panel" />
+
+        <modifyDataType columnName="serial"
+                        newDataType="VARCHAR(16)"
+                        tableName="panel" />
+
+        <addUniqueConstraint columnNames="serial"
+                             constraintName="uq_serial"
+                             tableName="panel" />
+    </changeSet>
+
+</databaseChangeLog>
diff --git a/src/main/resources/db/changelog/db.changelog-master.xml b/src/main/resources/db/changelog/db.changelog-master.xml
old mode 100755
new mode 100644
index ea61ac5..af6afac
--- a/src/main/resources/db/changelog/db.changelog-master.xml
+++ b/src/main/resources/db/changelog/db.changelog-master.xml
@@ -3,4 +3,5 @@
   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">
   <include file="db/changelog/db.changelog-1.0.xml"/>
+  <include file="db/changelog/db.changelog-2.0.xml"/>
 </databaseChangeLog>
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/DailyElectricityDataCollectorTest.java b/src/test/java/com/crossover/techtrial/DailyElectricityDataCollectorTest.java
new file mode 100644
index 0000000..0f165d4
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/DailyElectricityDataCollectorTest.java
@@ -0,0 +1,52 @@
+package com.crossover.techtrial;
+
+import com.crossover.techtrial.data.DailyElectricityDataCollector;
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.service.DailyElectricityService;
+import com.crossover.techtrial.service.HourlyElectricityService;
+import com.crossover.techtrial.service.PanelService;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.List;
+
+import static com.crossover.techtrial.utils.TestUtils.dailyElectricity;
+import static com.crossover.techtrial.utils.TestUtils.hourlyElectricity;
+import static com.crossover.techtrial.utils.TestUtils.panel;
+import static java.util.Collections.singletonList;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public class DailyElectricityDataCollectorTest {
+
+    private DailyElectricityDataCollector dailyElectricityDataCollector;
+    private HourlyElectricityService hourlyElectricityService;
+    private DailyElectricityService dailyElectricityService;
+    private PanelService panelService;
+
+    @Before
+    public void setUp() {
+        this.hourlyElectricityService = mock(HourlyElectricityService.class);
+        this.dailyElectricityService = mock(DailyElectricityService.class);
+        this.panelService = mock(PanelService.class);
+        this.dailyElectricityDataCollector = new DailyElectricityDataCollector(hourlyElectricityService, dailyElectricityService, panelService);
+    }
+
+    @Test
+    public void testConsolidateDailyElectricityGeneration() {
+        List<Panel> expectedPanels = singletonList(panel());
+        when(this.panelService.getAll()).thenReturn(expectedPanels);
+
+        List<HourlyElectricity> expectedHourly = singletonList(hourlyElectricity());
+        when(this.hourlyElectricityService.getAllHourlyElectricityByReadingAtBetween(any(), any(), any())).thenReturn(expectedHourly);
+
+        DailyElectricity expectedDaily = dailyElectricity();
+        when(this.dailyElectricityService.save(any())).thenReturn(expectedDaily);
+
+        this.dailyElectricityDataCollector.consolidateDailyElectricityGeneration();
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
index a1deacf..4439553 100644
--- a/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
+++ b/src/test/java/com/crossover/techtrial/controller/PanelControllerTest.java
@@ -1,12 +1,27 @@
 package com.crossover.techtrial.controller;
 
+import com.crossover.techtrial.model.HourlyElectricity;
 import com.crossover.techtrial.model.Panel;
+import com.fasterxml.jackson.databind.ObjectMapper;
+
+import static com.crossover.techtrial.utils.TestUtils.hourlyElectricity;
+import static com.crossover.techtrial.utils.TestUtils.panel;
+import static org.hamcrest.Matchers.is;
+import static org.hamcrest.Matchers.notNullValue;
+import static org.springframework.http.MediaType.APPLICATION_JSON;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
 import org.springframework.boot.test.web.client.TestRestTemplate;
@@ -14,7 +29,9 @@ import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
+import org.springframework.test.context.TestPropertySource;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.test.context.junit4.SpringRunner;
 import org.springframework.test.web.servlet.MockMvc;
 
 import org.springframework.test.web.servlet.setup.MockMvcBuilders;
@@ -26,36 +43,84 @@ import org.springframework.test.web.servlet.setup.MockMvcBuilders;
  *
  */
 
-@RunWith(SpringJUnit4ClassRunner.class)
+@RunWith(SpringRunner.class)
+@AutoConfigureMockMvc
 @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
+@TestPropertySource(properties = "crosssolar.scheduler.enabled=false")
 public class PanelControllerTest {
-  
-  MockMvc mockMvc;
-  
-  @Mock
-  private PanelController panelController;
-  
-  @Autowired
-  private TestRestTemplate template;
-
-  @Before
-  public void setup() throws Exception {
-    mockMvc = MockMvcBuilders.standaloneSetup(panelController).build();
-  }
-
-  @Test
-  public void testPanelShouldBeRegistered() throws Exception {
-    HttpEntity<Object> panel = getHttpEntity(
-        "{\"serial\": \"232323\", \"longitude\": \"54.123232\"," 
-            + " \"latitude\": \"54.123232\",\"brand\":\"tesla\" }");
-    ResponseEntity<Panel> response = template.postForEntity(
-        "/api/register", panel, Panel.class);
-    Assert.assertEquals(202,response.getStatusCode().value());
-  }
-
-  private HttpEntity<Object> getHttpEntity(Object body) {
-    HttpHeaders headers = new HttpHeaders();
-    headers.setContentType(MediaType.APPLICATION_JSON);
-    return new HttpEntity<Object>(body, headers);
-  }
+
+    private static final String SERIAL_ID = "1234567890123456";
+    private static final String INVALID_SERIAL_ID = "987129387";
+
+    @Autowired
+    private MockMvc mockMvc;
+
+    @Autowired
+    private ObjectMapper objectMapper;
+
+    @Test
+    public void testPanelShouldBeRegistered() throws Exception {
+        Panel panel = panel();
+        this.mockMvc.perform(post("/api/register")
+                .contentType(APPLICATION_JSON)
+                .content(objectMapper.writeValueAsString(panel)))
+                .andDo(print())
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$.brand", is(panel.getBrand())))
+                .andExpect(jsonPath("$.latitude", notNullValue()))
+                .andExpect(jsonPath("$.longitude", notNullValue()))
+                .andExpect(jsonPath("$.serial", is(panel.getSerial())))
+                .andExpect(jsonPath("$.id").doesNotExist());
+    }
+
+    @Test
+    public void testSaveHourlyElectricity() throws Exception {
+        HourlyElectricity hourlyElectricity = hourlyElectricity();
+        this.mockMvc.perform(post("/api/panels/{panel-serial}/hourly", SERIAL_ID)
+                .contentType(APPLICATION_JSON)
+                .content(objectMapper.writeValueAsString(hourlyElectricity)))
+                .andDo(print())
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$.generatedElectricity", notNullValue()))
+                .andExpect(jsonPath("$.readingAt", notNullValue()));
+    }
+
+    @Test
+    public void testGetHourlyElectricity() throws Exception {
+        this.mockMvc.perform(get("/api/panels/{panel-serial}/hourly", SERIAL_ID)
+                .contentType(APPLICATION_JSON))
+                .andDo(print())
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$.content[0].generatedElectricity", notNullValue()))
+                .andExpect(jsonPath("$.content[0].readingAt", notNullValue()));
+    }
+
+    @Test
+    public void testGetHourlyElectricityNotFound() throws Exception {
+        this.mockMvc.perform(get("/api/panels/{panel-serial}/hourly", INVALID_SERIAL_ID)
+                .contentType(APPLICATION_JSON))
+                .andDo(print())
+                .andExpect(status().is(400));
+    }
+
+    @Test
+    public void testGetAllDailyElectricityFromYesterday() throws Exception {
+        this.mockMvc.perform(get("/api/panels/{panel-serial}/daily", SERIAL_ID)
+                .contentType(APPLICATION_JSON))
+                .andDo(print())
+                .andExpect(status().isOk())
+                .andExpect(jsonPath("$[0].date", notNullValue()))
+                .andExpect(jsonPath("$[0].average", notNullValue()))
+                .andExpect(jsonPath("$[0].min", notNullValue()))
+                .andExpect(jsonPath("$[0].max", notNullValue()))
+                .andExpect(jsonPath("$[0].sum", notNullValue()));
+    }
+
+    @Test
+    public void testGetAllDailyElectricityFromYesterdayNotFound() throws Exception {
+        this.mockMvc.perform(get("/api/panels/{panel-serial}/daily", INVALID_SERIAL_ID)
+                .contentType(APPLICATION_JSON))
+                .andDo(print())
+                .andExpect(status().isNotFound());
+    }
 }
diff --git a/src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java b/src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java
new file mode 100644
index 0000000..1eb9e1e
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/service/DailyElectricityServiceTest.java
@@ -0,0 +1,73 @@
+package com.crossover.techtrial.service;
+
+import com.crossover.techtrial.dto.DailyElectricityDTO;
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.repository.DailyElectricityRepository;
+import com.crossover.techtrial.exceptions.ResourceNotFoundException;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.Collections;
+import java.util.List;
+
+import static com.crossover.techtrial.utils.TestUtils.dailyElectricity;
+import static com.crossover.techtrial.utils.TestUtils.panel;
+import static java.util.Collections.emptyList;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * Unit tests for {@link DailyElectricityService}.
+ *
+ */
+public class DailyElectricityServiceTest {
+
+    private DailyElectricityService dailyElectricityService;
+    private DailyElectricityRepository dailyElectricityRepository;
+
+    @Before
+    public void setUp() {
+        PanelService panelService = mock(PanelService.class);
+        when(panelService.getBySerial(any())).thenReturn(panel());
+
+        this.dailyElectricityRepository = mock(DailyElectricityRepository.class);
+        this.dailyElectricityService = new DailyElectricityServiceImpl(this.dailyElectricityRepository, panelService);
+    }
+
+    @Test
+    public void save() {
+        DailyElectricity expected = dailyElectricity();
+        when(this.dailyElectricityRepository.save(any())).thenReturn(expected);
+
+        DailyElectricity result = this.dailyElectricityService.save(expected);
+
+        assertEquals(expected, result);
+    }
+
+    @Test
+    public void getAllDailyElectricityByPanelId() {
+        DailyElectricity dailyElectricity = dailyElectricity();
+        List<DailyElectricity> expected = Collections.singletonList(dailyElectricity);
+        when(this.dailyElectricityRepository.findAllByPanelId(any())).thenReturn(expected);
+
+        List<DailyElectricityDTO> result = this.dailyElectricityService.getAllDailyElectricityByPanelId("random-serial");
+
+        for (DailyElectricityDTO dto : result) {
+            assertEquals(dailyElectricity.getGeneratedElectricityAverage().longValue(), dto.getAverage().longValue());
+            assertEquals(dailyElectricity.getGeneratedElectricityMax(), dto.getMax());
+            assertEquals(dailyElectricity.getGeneratedElectricityMin(), dto.getMin());
+            assertEquals(dailyElectricity.getGeneratedElectricitySum(), dto.getSum());
+            assertEquals(dailyElectricity.getReadingAt().toLocalDate(), dto.getDate());
+            assertEquals(dailyElectricity.getPanel().getId(), dto.getPanelId());
+        }
+    }
+
+    @Test(expected = ResourceNotFoundException.class)
+    public void getAllDailyElectricityByPanelId_notFound() {
+        when(this.dailyElectricityRepository.findAllByPanelId(any())).thenReturn(emptyList());
+        this.dailyElectricityService.getAllDailyElectricityByPanelId("random-serial");
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/service/PanelServiceTest.java b/src/test/java/com/crossover/techtrial/service/PanelServiceTest.java
new file mode 100644
index 0000000..ba38584
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/service/PanelServiceTest.java
@@ -0,0 +1,64 @@
+package com.crossover.techtrial.service;
+
+import com.crossover.techtrial.model.Panel;
+import com.crossover.techtrial.repository.PanelRepository;
+import com.crossover.techtrial.exceptions.ResourceNotFoundException;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.util.List;
+
+import static com.crossover.techtrial.utils.TestUtils.panel;
+import static java.util.Collections.singletonList;
+import static org.junit.Assert.*;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+/**
+ * Unit tests for {@link PanelService}.
+ *
+ */
+public class PanelServiceTest {
+
+    private PanelService panelService;
+    private PanelRepository panelRepository;
+
+    @Before
+    public void setUp() {
+        panelRepository = mock(PanelRepository.class);
+        this.panelService = new PanelServiceImpl(panelRepository);
+    }
+
+    @Test
+    public void register() {
+        this.panelService.register(panel());
+    }
+
+    @Test
+    public void findBySerial() {
+        Panel expected = panel();
+        when(this.panelRepository.findBySerial(any())).thenReturn(expected);
+
+        Panel result = this.panelService.getBySerial(expected.getSerial());
+
+        assertEquals(expected, result);
+    }
+
+    @Test(expected = ResourceNotFoundException.class)
+    public void findBySerial_notFound() {
+        when(this.panelRepository.findBySerial(any())).thenReturn(null);
+
+        this.panelService.getBySerial("random-panel-id");
+    }
+
+    @Test
+    public void getAll() {
+        List<Panel> expected = singletonList(panel());
+        when(this.panelRepository.findAll()).thenReturn(expected);
+
+        List<Panel> result = this.panelService.getAll();
+
+        assertEquals(expected, result);
+    }
+}
\ No newline at end of file
diff --git a/src/test/java/com/crossover/techtrial/utils/TestUtils.java b/src/test/java/com/crossover/techtrial/utils/TestUtils.java
new file mode 100644
index 0000000..050acaf
--- /dev/null
+++ b/src/test/java/com/crossover/techtrial/utils/TestUtils.java
@@ -0,0 +1,51 @@
+package com.crossover.techtrial.utils;
+
+import com.crossover.techtrial.model.DailyElectricity;
+import com.crossover.techtrial.model.HourlyElectricity;
+import com.crossover.techtrial.model.Panel;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+
+import java.time.LocalDateTime;
+import java.util.Random;
+import java.util.UUID;
+
+public class TestUtils {
+
+    private static Random random = new Random();
+
+    public static Panel panel(String... serialId) {
+        String serial = serialId.length == 0 ? UUID.randomUUID().toString().substring(0, 15) : serialId[0];
+
+        Panel panel = new Panel();
+        panel.setId(random.nextLong());
+        panel.setBrand("Tesla");
+        panel.setLatitude(random.nextDouble());
+        panel.setLongitude(random.nextDouble());
+        panel.setSerial(serial);
+        return panel;
+    }
+
+    public static HourlyElectricity hourlyElectricity() {
+        HourlyElectricity hourlyElectricity = new HourlyElectricity();
+        hourlyElectricity.setId(random.nextLong());
+        hourlyElectricity.setGeneratedElectricity(random.nextLong());
+        hourlyElectricity.setPanel(panel());
+        hourlyElectricity.setReadingAt(LocalDateTime.now());
+        return hourlyElectricity;
+    }
+
+    public static DailyElectricity dailyElectricity() {
+        return new DailyElectricity(panel(),
+                random.nextLong(),
+                random.nextLong(),
+                random.nextLong(),
+                random.nextDouble(),
+                LocalDateTime.now()
+        );
+    }
+
+    public static Pageable pageable() {
+        return PageRequest.of(0, 5);
+    }
+}
-- 
2.18.0.windows.1

